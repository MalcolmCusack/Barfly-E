{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport EditScreenInfo from \"../components/EditScreenInfo\";\nimport { Text, View } from \"../components/Themed\";\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { onCreateOrder } from \"../src/graphql/subscriptions\";\nimport { listOrders } from \"../src/graphql/queries\";\nexport default function TabOneScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      orders = _React$useState2[0],\n      setOrders = _React$useState2[1];\n\n  function subscribe() {\n    var ordersPromise, response;\n    return _regeneratorRuntime.async(function subscribe$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            ordersPromise = API.graphql(graphqlOperation(listOrders));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(ordersPromise);\n\n          case 4:\n            response = _context.sent;\n            console.log(response);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n            API.graphql(graphqlOperation(onCreateOrder)).subscribe({\n              next: function next(orderData) {\n                console.log(\"orderData: \", orderData.value.data);\n                setOrders([].concat(_toConsumableArray(orders), [orderData.value.data]));\n              }\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  React.useEffect(function () {\n    console.log('work');\n    subscribe();\n  }, []);\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Text, {\n    style: styles.title\n  }, \"Tab One\"), React.createElement(Text, null, \"What up\"), orders.items.map(function (order) {\n    React.createElement(Text, null, \"order.items\");\n  }), React.createElement(View, {\n    style: styles.separator,\n    lightColor: \"#eee\",\n    darkColor: \"rgba(255,255,255,0.1)\"\n  }), React.createElement(EditScreenInfo, {\n    path: \"/screens/TabOneScreen.tsx\"\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  }\n});","map":{"version":3,"sources":["/Users/malc/Desktop/barfly-e/screens/TabOneScreen.tsx"],"names":["React","EditScreenInfo","Text","View","API","graphqlOperation","onCreateOrder","listOrders","TabOneScreen","navigation","useState","orders","setOrders","subscribe","ordersPromise","graphql","response","console","log","next","orderData","value","data","useEffect","styles","container","title","items","map","order","separator","StyleSheet","create","flex","alignItems","justifyContent","fontSize","fontWeight","marginVertical","height","width"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAGA,OAAOC,cAAP;AACA,SAASC,IAAT,EAAeC,IAAf;AAEA,SAAQC,GAAR,EAAaC,gBAAb,QAAoC,aAApC;AACA,SAAQC,aAAR;AACA,SAASC,UAAT;AAEA,eAAe,SAASC,YAAT,OAAsC;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAEnD,wBAA4BT,KAAK,CAACU,QAAN,CAAe,EAAf,CAA5B;AAAA;AAAA,MAAOC,MAAP;AAAA,MAAeC,SAAf;;AAEA,WAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGUC,YAAAA,aAHV,GAG0BV,GAAG,CAACW,OAAJ,CAAYV,gBAAgB,CAACE,UAAD,CAA5B,CAH1B;AAAA;AAAA,6CAI2BO,aAJ3B;;AAAA;AAIUE,YAAAA,QAJV;AAKIC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AALJ;AAAA;;AAAA;AAAA;AAAA;AAOIC,YAAAA,OAAO,CAACC,GAAR;;AAPJ;AAUEd,YAAAA,GAAG,CAACW,OAAJ,CAAYV,gBAAgB,CAACC,aAAD,CAA5B,EACEO,SADF,CACY;AACRM,cAAAA,IAAI,EAAE,cAACC,SAAD,EAAe;AACjBH,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,SAAS,CAACC,KAAV,CAAgBC,IAA3C;AACAV,gBAAAA,SAAS,8BAAKD,MAAL,IAAaS,SAAS,CAACC,KAAV,CAAgBC,IAA7B,GAAT;AACH;AAJO,aADZ;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBAtB,EAAAA,KAAK,CAACuB,SAAN,CAAgB,YAAM;AAClBN,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAL,IAAAA,SAAS;AAEZ,GAJD,EAIG,EAJH;AAMA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEW,MAAM,CAACC;AAApB,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE;AAApB,eADF,EAEE,oBAAC,IAAD,kBAFF,EAGGf,MAAM,CAACgB,KAAP,CAAaC,GAAb,CAAiB,UAAAC,KAAK,EAAI;AACzB,wBAAC,IAAD;AACD,GAFA,CAHH,EAME,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACM,SAApB;AAA+B,IAAA,UAAU,EAAC,MAA1C;AAAiD,IAAA,SAAS,EAAC;AAA3D,IANF,EAOE,oBAAC,cAAD;AAAgB,IAAA,IAAI,EAAC;AAArB,IAPF,CADF;AAWD;AAED,IAAMN,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP,GADoB;AAM/BT,EAAAA,KAAK,EAAE;AACLU,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE;AAFP,GANwB;AAU/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,cAAc,EAAE,EADP;AAETC,IAAAA,MAAM,EAAE,CAFC;AAGTC,IAAAA,KAAK,EAAE;AAHE;AAVoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\nimport {API, graphqlOperation} from 'aws-amplify';\nimport {onCreateOrder} from '../src/graphql/subscriptions';\nimport { listOrders } from '../src/graphql/queries';\n\nexport default function TabOneScreen({ navigation }) {\n\n  const [orders, setOrders] = React.useState([])\n\n  async function subscribe() {\n\n    try {\n      const ordersPromise = API.graphql(graphqlOperation(listOrders))\n      const response = await ordersPromise\n      console.log(response)\n    } catch (err) {\n      console.log(err)\n    }\n\n    API.graphql(graphqlOperation(onCreateOrder)\n    ).subscribe({\n        next: (orderData) => {\n            console.log(\"orderData: \", orderData.value.data)\n            setOrders([...orders, orderData.value.data])\n        }\n    })\n}\n\n\n  React.useEffect(() => {\n      console.log('work')\n      subscribe()\n      \n  }, [])\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <Text>What up</Text>\n      {orders.items.map(order => {\n        <Text>order.items</Text>\n      })}\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}