{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { onCreateOrder } from \"../../graphql/subscriptions\";\nimport { listOrders } from \"../../graphql/queries\";\nimport { Text, View } from \"../../../components/Themed\";\nimport Order from \"./Order\";\n\nvar OrderQueue = function OrderQueue() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      orders = _useState2[0],\n      setOrders = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allOrders = _useState4[0],\n      setAllOrders = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  useEffect(function () {\n    var subscribe = function subscribe() {\n      var ordersPromise, response, orderResponse;\n      return _regeneratorRuntime.async(function subscribe$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              ordersPromise = API.graphql(graphqlOperation(listOrders));\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(ordersPromise);\n\n            case 4:\n              response = _context.sent;\n              setAllOrders([].concat(_toConsumableArray(allOrders), [response.data.listOrders.items]));\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n              try {\n                orderResponse = API.graphql(graphqlOperation(onCreateOrder)).subscribe({\n                  next: function next(orderData) {\n                    var orderItems = JSON.parse(orderData.value.data.onCreateOrder.items);\n                    setOrders(function (orders) {\n                      return [].concat(_toConsumableArray(orders), [orderItems]);\n                    });\n                  }\n                });\n                setIsLoading(false);\n              } catch (err) {\n                console.log(err);\n              }\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    subscribe();\n  }, []);\n  console.log(orders);\n  return React.createElement(View, null, !isLoading ? orders.map(function (order) {\n    console.log('order: ', order);\n    return order.map(function (item) {\n      {\n        console.log('item: ', item);\n      }\n      return React.createElement(Order, {\n        key: item.id,\n        item: item\n      });\n    });\n  }) : null);\n};\n\nexport default OrderQueue;","map":{"version":3,"sources":["/Users/malc/Desktop/barfly-e/src/components/orderqueue/OrderQueue.js"],"names":["React","useState","useEffect","API","graphqlOperation","onCreateOrder","listOrders","Text","View","Order","OrderQueue","orders","setOrders","allOrders","setAllOrders","isLoading","setIsLoading","subscribe","ordersPromise","graphql","response","data","items","console","log","orderResponse","next","orderData","orderItems","JSON","parse","value","err","map","order","item","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,GAAR,EAAaC,gBAAb,QAAoC,aAApC;AACA,SAAQC,aAAR;AACA,SAASC,UAAT;AACA,SAASC,IAAT,EAAeC,IAAf;AACA,OAAOC,KAAP;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAErB,kBAA4BT,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOU,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAkCX,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOY,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAkCb,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOc,SAAP;AAAA,MAAkBC,YAAlB;;AAKFd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMe,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGRC,cAAAA,aAHQ,GAGQf,GAAG,CAACgB,OAAJ,CAAYf,gBAAgB,CAACE,UAAD,CAA5B,CAHR;AAAA;AAAA,+CAISY,aAJT;;AAAA;AAIRE,cAAAA,QAJQ;AAKdN,cAAAA,YAAY,8BAAKD,SAAL,IAAgBO,QAAQ,CAACC,IAAT,CAAcf,UAAd,CAAyBgB,KAAzC,GAAZ;AALc;AAAA;;AAAA;AAAA;AAAA;AAQdC,cAAAA,OAAO,CAACC,GAAR;;AARc;AAWd,kBAAI;AACMC,gBAAAA,aADN,GACsBtB,GAAG,CAACgB,OAAJ,CAAYf,gBAAgB,CAACC,aAAD,CAA5B,EACpBY,SADoB,CACV;AACRS,kBAAAA,IAAI,EAAE,cAACC,SAAD,EAAe;AAEjB,wBAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,SAAS,CAACI,KAAV,CAAgBV,IAAhB,CAAqBhB,aAArB,CAAmCiB,KAA9C,CAAnB;AACAV,oBAAAA,SAAS,CAAC,UAAAD,MAAM;AAAA,0DAAQA,MAAR,IAAgBiB,UAAhB;AAAA,qBAAP,CAAT;AACH;AALO,iBADU,CADtB;AAUAZ,gBAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,eAZD,CAYE,OAAOgB,GAAP,EAAY;AACVT,gBAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACH;;AAzBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AA6BAf,IAAAA,SAAS;AAEV,GAhCQ,EAgCN,EAhCM,CAAT;AAkCEM,EAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AAEA,SACI,oBAAC,IAAD,QAEK,CAACI,SAAD,GAAaJ,MAAM,CAACsB,GAAP,CAAW,UAAAC,KAAK,EAAI;AAC9BX,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBU,KAAvB;AACA,WAAOA,KAAK,CAACD,GAAN,CAAU,UAAAE,IAAI,EAAI;AACrB;AAACZ,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBW,IAAtB;AAA4B;AAC7B,aAAO,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAjB;AAAqB,QAAA,IAAI,EAAED;AAA3B,QAAP;AACH,KAHM,CAAP;AAIH,GANa,CAAb,GAMI,IART,CADJ;AAYH,CAzDD;;AA2DA,eAAezB,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {API, graphqlOperation} from 'aws-amplify';\nimport {onCreateOrder} from '../../graphql/subscriptions';\nimport { listOrders } from '../../graphql/queries';\nimport { Text, View } from '../../../components/Themed';\nimport Order from './Order';\n\nconst OrderQueue = () => {\n\n    const [orders, setOrders] = useState([])\n    const [allOrders, setAllOrders] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n\n    \n\n\n  useEffect(() => {\n    const subscribe = async () => {\n\n        try {\n        const ordersPromise = API.graphql(graphqlOperation(listOrders))\n        const response = await ordersPromise\n        setAllOrders([...allOrders, response.data.listOrders.items])\n        //console.log(response.data.listOrders.items)\n        } catch (err) {\n        console.log(err)\n        }\n\n        try {\n            const orderResponse = API.graphql(graphqlOperation(onCreateOrder)\n            ).subscribe({\n                next: (orderData) => {\n                    \n                    const orderItems = JSON.parse(orderData.value.data.onCreateOrder.items)\n                    setOrders(orders => [...orders, orderItems])\n                }\n            })\n  \n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n        }\n        \n    }\n      \n    subscribe()\n      \n  }, [])\n\n    console.log(orders)\n  \n    return (\n        <View >\n\n            {!isLoading ? orders.map(order => {\n                console.log('order: ', order)\n                return order.map(item => {\n                    {console.log('item: ', item)}\n                    return <Order key={item.id} item={item} />\n                })\n            }) : null}\n        </View>\n    )\n}\n\nexport default OrderQueue\n"]},"metadata":{},"sourceType":"module"}