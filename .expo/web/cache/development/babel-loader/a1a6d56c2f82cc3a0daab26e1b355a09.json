{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { onCreateOrder } from \"../graphql/subscriptions\";\nimport { listOrders } from \"../graphql/queries\";\n\nvar OrderQueue = function OrderQueue() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      orders = _useState2[0],\n      setOrders = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allOrders = _useState4[0],\n      setAllOrders = _useState4[1];\n\n  function subscribe() {\n    var ordersPromise, response;\n    return _regeneratorRuntime.async(function subscribe$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            ordersPromise = API.graphql(graphqlOperation(listOrders));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(ordersPromise);\n\n          case 4:\n            response = _context.sent;\n            setAllOrders([].concat(_toConsumableArray(allOrders), [response.data.listOrders.items]));\n            console.log(response.data.listOrders.items);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 12:\n            API.graphql(graphqlOperation(onCreateOrder)).subscribe({\n              next: function next(orderData) {\n                console.log(\"orderData: \", orderData.value.data);\n                setOrders([].concat(_toConsumableArray(orders), [orderData.value.data]));\n              }\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  }\n\n  useEffect(function () {\n    subscribe();\n  }, []);\n\n  if (allOrders.length > 0) {\n    console.log(allOrders[0].map(function (element) {\n      console.log(element.id);\n    }));\n  }\n\n  return React.createElement(\"div\", null, allOrders > 0 ? allOrders[0].map(function (element) {\n    React.createElement(Text, null, element.id);\n  }) : null);\n};\n\nexport default OrderQueue;","map":{"version":3,"sources":["/Users/malc/Desktop/barfly-e/src/components/OrderQueue.js"],"names":["React","useState","useEffect","API","graphqlOperation","onCreateOrder","listOrders","OrderQueue","orders","setOrders","allOrders","setAllOrders","subscribe","ordersPromise","graphql","response","data","items","console","log","next","orderData","value","length","map","element","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,GAAR,EAAaC,gBAAb,QAAoC,aAApC;AACA,SAAQC,aAAR;AACA,SAASC,UAAT;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAErB,kBAA4BN,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOO,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAkCR,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOS,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,WAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGUC,YAAAA,aAHV,GAG0BV,GAAG,CAACW,OAAJ,CAAYV,gBAAgB,CAACE,UAAD,CAA5B,CAH1B;AAAA;AAAA,6CAI2BO,aAJ3B;;AAAA;AAIUE,YAAAA,QAJV;AAKIJ,YAAAA,YAAY,8BAAKD,SAAL,IAAgBK,QAAQ,CAACC,IAAT,CAAcV,UAAd,CAAyBW,KAAzC,GAAZ;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACC,IAAT,CAAcV,UAAd,CAAyBW,KAArC;AANJ;AAAA;;AAAA;AAAA;AAAA;AAQIC,YAAAA,OAAO,CAACC,GAAR;;AARJ;AAWIhB,YAAAA,GAAG,CAACW,OAAJ,CAAYV,gBAAgB,CAACC,aAAD,CAA5B,EACEO,SADF,CACY;AACRQ,cAAAA,IAAI,EAAE,cAACC,SAAD,EAAe;AACjBH,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,SAAS,CAACC,KAAV,CAAgBN,IAA3C;AACAP,gBAAAA,SAAS,8BAAKD,MAAL,IAAaa,SAAS,CAACC,KAAV,CAAgBN,IAA7B,GAAT;AACH;AAJO,aADZ;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBFd,EAAAA,SAAS,CAAC,YAAM;AACZU,IAAAA,SAAS;AAEZ,GAHQ,EAGN,EAHM,CAAT;;AAIA,MAAIF,SAAS,CAACa,MAAV,GAAmB,CAAvB,EAA0B;AACxBL,IAAAA,OAAO,CAACC,GAAR,CAAYT,SAAS,CAAC,CAAD,CAAT,CAAac,GAAb,CAAiB,UAAAC,OAAO,EAAI;AACpCP,MAAAA,OAAO,CAACC,GAAR,CAAYM,OAAO,CAACC,EAApB;AACD,KAFS,CAAZ;AAGD;;AAEC,SACI,iCACKhB,SAAS,GAAG,CAAZ,GAAgBA,SAAS,CAAC,CAAD,CAAT,CAAac,GAAb,CAAiB,UAAAC,OAAO,EAAI;AACzC,wBAAC,IAAD,QAAOA,OAAO,CAACC,EAAf;AACH,GAFgB,CAAhB,GAEI,IAHT,CADJ;AAOH,CA3CD;;AA6CA,eAAenB,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {API, graphqlOperation} from 'aws-amplify';\nimport {onCreateOrder} from '../graphql/subscriptions';\nimport { listOrders } from '../graphql/queries';\n\nconst OrderQueue = () => {\n\n    const [orders, setOrders] = useState([])\n    const [allOrders, setAllOrders] = useState([])\n\n    async function subscribe() {\n\n        try {\n        const ordersPromise = API.graphql(graphqlOperation(listOrders))\n        const response = await ordersPromise\n        setAllOrders([...allOrders, response.data.listOrders.items])\n        console.log(response.data.listOrders.items)\n        } catch (err) {\n        console.log(err)\n        }\n\n        API.graphql(graphqlOperation(onCreateOrder)\n        ).subscribe({\n            next: (orderData) => {\n                console.log(\"orderData: \", orderData.value.data)\n                setOrders([...orders, orderData.value.data])\n            }\n        })\n}\n\n\n  useEffect(() => {\n      subscribe()\n      \n  }, [])\n  if (allOrders.length > 0) {\n    console.log(allOrders[0].map(element => {\n        console.log(element.id)\n      }))\n  }\n  \n    return (\n        <div>\n            {allOrders > 0 ? allOrders[0].map(element => {\n                <Text>{element.id}</Text>\n            }) : null}\n        </div>\n    )\n}\n\nexport default OrderQueue\n"]},"metadata":{},"sourceType":"module"}