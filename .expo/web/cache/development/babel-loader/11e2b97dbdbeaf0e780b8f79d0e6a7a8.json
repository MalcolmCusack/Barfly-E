{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { Text, View } from \"../../../components/Themed\";\nimport { Card, Title, Paragraph, Button, Subheading, Divider } from 'react-native-paper';\nimport { getUser } from \"../../graphql/queries\";\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { List, Colors } from 'react-native-paper';\nimport { updateOrder } from \"../../graphql/mutations\";\n\nvar Order = function Order(_ref) {\n  var order = _ref.order;\n\n  var _useState = useState(JSON.parse(order.items)),\n      _useState2 = _slicedToArray(_useState, 2),\n      orderItems = _useState2[0],\n      setOrderItems = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setUser = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      expanded = _useState8[0],\n      setExpanded = _useState8[1];\n\n  var payload = {\n    id: order.id,\n    completed: !order.completed,\n    items: order.items,\n    userID: order.userID\n  };\n\n  var updateCurrentOrder = function updateCurrentOrder() {\n    var update, updateResponse;\n    return _regeneratorRuntime.async(function updateCurrentOrder$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            update = API.graphql(graphqlOperation(updateOrder, {\n              input: payload\n            }));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(update);\n\n          case 4:\n            updateResponse = _context.sent;\n            console.log(updateResponse);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  useEffect(function () {\n    var gatherUser = function gatherUser() {\n      var data, response;\n      return _regeneratorRuntime.async(function gatherUser$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              console.log(order);\n              data = API.graphql({\n                query: getUser,\n                variables: {\n                  id: order.userID\n                }\n              });\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(data);\n\n            case 5:\n              response = _context2.sent;\n              console.log(response);\n              setUser(response.data.getUser);\n              setIsLoading(false);\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 11]], Promise);\n    };\n\n    gatherUser();\n  }, []);\n\n  var handlePress = function handlePress() {\n    setExpanded(!expanded);\n  };\n\n  var renderOrder = function renderOrder() {\n    React.createElement(List.Section, null, React.createElement(List.Accordion, {\n      title: user.name + \"'s Order\",\n      expanded: expanded,\n      onPress: handlePress\n    }, orderItems.map(function (item) {\n      return React.createElement(List.Item, {\n        key: item.id,\n        title: item.name,\n        description: item.id,\n        left: function left(props) {\n          React.createElement(List.Icon, {\n            color: Colors.blue500,\n            icon: \"check\"\n          });\n        },\n        right: function right(props) {\n          React.createElement(List.Icon, {\n            icon: \"check\"\n          });\n        }\n      });\n    })));\n  };\n\n  return React.createElement(View, null, !isLoading ? React.createElement(Card, {\n    key: order.id\n  }, React.createElement(Card.Title, {\n    title: user.name + \"'s order\"\n  }), React.createElement(Divider, null), React.createElement(Paragraph, null, Date.parse(order.createdAt).getHours()), React.createElement(Card.Content, null, orderItems.map(function (item) {\n    return React.createElement(Subheading, {\n      key: item.id\n    }, item.name);\n  })), React.createElement(Card.Actions, null, React.createElement(Button, {\n    onPress: updateCurrentOrder\n  }, \"Start\"), React.createElement(Button, {\n    onPress: updateCurrentOrder\n  }, \"Complete\"))) : null);\n};\n\nexport default Order;","map":{"version":3,"sources":["/Users/malc/Desktop/barfly-e/src/components/orderqueue/Order.js"],"names":["React","useState","useEffect","Text","View","Card","Title","Paragraph","Button","Subheading","Divider","getUser","API","graphqlOperation","List","Colors","updateOrder","Order","order","JSON","parse","items","orderItems","setOrderItems","user","setUser","isLoading","setIsLoading","expanded","setExpanded","payload","id","completed","userID","updateCurrentOrder","update","graphql","input","updateResponse","console","log","gatherUser","data","query","variables","response","handlePress","renderOrder","name","map","item","props","blue500","Date","createdAt","getHours"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Text, View } from '../../../components/Themed';\nimport {Card, Title, Paragraph, Button, Subheading, Divider} from 'react-native-paper';\nimport { getUser } from '../../graphql/queries';\nimport {API, graphqlOperation} from 'aws-amplify';\nimport { List, Colors } from 'react-native-paper';\nimport {updateOrder} from '../../graphql/mutations';\n\n\n\nconst Order = ({ order }) => {\n\n    const [orderItems, setOrderItems] = useState(JSON.parse(order.items))\n    const [user, setUser] = useState()\n    const [isLoading, setIsLoading] = useState(true)\n    const [expanded, setExpanded] = useState(false)\n\n    const payload = {\n        id: order.id,\n        completed: !order.completed,\n        items: order.items,\n        userID: order.userID\n\n    }\n\n    const updateCurrentOrder = async () => {\n\n\n        try {\n            const update = API.graphql(graphqlOperation(updateOrder, {\n                input: payload\n            }))\n            const updateResponse = await update\n            console.log(updateResponse)\n        } catch (err) {\n            console.log(err)\n        }\n        \n    }\n\n    useEffect(() => {\n\n        const gatherUser = async () => {\n            try { \n                console.log(order)\n                const data = API.graphql( {query: getUser, \n                    variables: {\n                        id: order.userID\n                    }\n                })\n                const response =  await data\n                console.log(response)\n                setUser(response.data.getUser)\n                setIsLoading(false)\n    \n            } catch (err) {\n                console.log(err)\n            }\n        }\n\n        gatherUser()\n\n        \n    }, [])\n\n    const handlePress = () => {\n        setExpanded(!expanded)\n    }\n\n     const renderOrder = () => {\n        <List.Section>\n        <List.Accordion\n           title={user.name + \"'s Order\"}\n           expanded={expanded}\n           onPress={handlePress}\n       >\n           {orderItems.map(item => {\n              return <List.Item key={item.id} \n                title={item.name} \n                description={item.id} \n                left={props => {<List.Icon color={Colors.blue500} icon='check'/>}}\n                right={props => {<List.Icon icon='check'/>}}\n                >\n              </List.Item>\n             \n           })\n           }\n       </List.Accordion>\n    </List.Section>\n     }\n\n\n\n    return (\n\n        <View>\n            {!isLoading ? (\n                   <Card key={order.id}>\n                       <Card.Title title={user.name + \"'s order\"} />\n                       <Divider />\n                       <Paragraph>{Date.parse(order.createdAt).getHours()}</Paragraph>\n                       <Card.Content>\n                           {orderItems.map(item => {\n                              return (\n                                <Subheading key={item.id}>\n                                    {item.name}\n                               </Subheading>\n                              ) \n                           })}\n                        \n                       </Card.Content>\n                       <Card.Actions>\n                           <Button onPress={updateCurrentOrder}>Start</Button>\n                           <Button onPress={updateCurrentOrder}>Complete</Button>\n                       </Card.Actions>\n\n                   </Card>\n            \n            ) : null}\n            \n            \n\n        </View>\n    )\n}\n\n\nexport default Order\n"]},"metadata":{},"sourceType":"module"}