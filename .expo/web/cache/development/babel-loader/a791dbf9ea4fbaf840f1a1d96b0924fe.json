{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { Text, View } from \"../../../components/Themed\";\nimport { Card, Title, Paragraph, Button } from 'react-native-paper';\nimport { getUser } from \"../../graphql/queries\";\nimport { API } from 'aws-amplify';\nimport { List } from 'react-native-paper';\n\nvar Order = function Order(_ref) {\n  var order = _ref.order;\n\n  var _useState = useState(JSON.parse(order.items)),\n      _useState2 = _slicedToArray(_useState, 2),\n      orderItems = _useState2[0],\n      setOrderItems = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setUser = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      expanded = _useState8[0],\n      setExpanded = _useState8[1];\n\n  useEffect(function () {\n    var gatherUser = function gatherUser() {\n      var data, response;\n      return _regeneratorRuntime.async(function gatherUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              console.log(order);\n              data = API.graphql({\n                query: getUser,\n                variables: {\n                  id: order.userID\n                }\n              });\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(data);\n\n            case 5:\n              response = _context.sent;\n              console.log(response);\n              setUser(response.data.getUser);\n              setIsLoading(false);\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11]], Promise);\n    };\n\n    gatherUser();\n  }, []);\n\n  var handlePress = function handlePress() {};\n\n  var renderOrder = function renderOrder() {\n    React.createElement(List.Section, {\n      title: \"Order Queue\"\n    }, React.createElement(List.Accordion, {\n      title: user.name + \"'s Order\"\n    }, orderItems.map(function (item) {\n      React.createElement(List.Item, {\n        title: item.name\n      }, user.email);\n    })));\n  };\n\n  return React.createElement(View, null, !isLoading ? orderItems.map(function (item) {\n    return React.createElement(Card, {\n      key: item.id\n    }, React.createElement(Card.Title, {\n      title: item.name\n    }), React.createElement(Card.Content, null, React.createElement(Paragraph, null, user.name), React.createElement(Paragraph, null, \"email: \", user.email)), React.createElement(Card.Actions, null, React.createElement(Button, null, \"Start\"), React.createElement(Button, null, \"Complete\")));\n  }) : null);\n};\n\nexport default Order;","map":{"version":3,"sources":["/Users/malc/Desktop/barfly-e/src/components/orderqueue/Order.js"],"names":["React","useState","useEffect","Text","View","Card","Title","Paragraph","Button","getUser","API","List","Order","order","JSON","parse","items","orderItems","setOrderItems","user","setUser","isLoading","setIsLoading","expanded","setExpanded","gatherUser","console","log","data","graphql","query","variables","id","userID","response","handlePress","renderOrder","name","map","item","email"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Text, View } from '../../../components/Themed';\nimport {Card, Title, Paragraph, Button} from 'react-native-paper';\nimport { getUser } from '../../graphql/queries';\nimport {API} from 'aws-amplify';\nimport { List } from 'react-native-paper';\n\n\nconst Order = ({ order }) => {\n\n    const [orderItems, setOrderItems] = useState(JSON.parse(order.items))\n    const [user, setUser] = useState()\n    const [isLoading, setIsLoading] = useState(true)\n    const [expanded, setExpanded] = useState(true)\n\n    useEffect(() => {\n\n        const gatherUser = async () => {\n            try { \n                console.log(order)\n                const data = API.graphql( {query: getUser, \n                    variables: {\n                        id: order.userID\n                    }\n                })\n                const response =  await data\n                console.log(response)\n                setUser(response.data.getUser)\n                setIsLoading(false)\n    \n            } catch (err) {\n                console.log(err)\n            }\n        }\n\n        gatherUser()\n\n        \n    }, [])\n\n    const handlePress = () => {\n\n    }\n\n     const renderOrder = () => {\n         <List.Section title=\"Order Queue\">\n             <List.Accordion\n                title={user.name + \"'s Order\"}\n            >\n                {orderItems.map(item => {\n                    <List.Item title={item.name}>\n                        {user.email}\n                    </List.Item>\n                })\n                }\n            </List.Accordion>\n         </List.Section>\n     }\n\n\n\n    return (\n\n        <View>\n            {!isLoading ? orderItems.map(item => {\n               return  (\n                   <Card key={item.id}>\n                       <Card.Title title={item.name} />\n                       <Card.Content>\n                           <Paragraph>{user.name}</Paragraph>\n                            <Paragraph>email: {user.email}</Paragraph>\n                       </Card.Content>\n                       <Card.Actions>\n                           <Button>Start</Button>\n                           <Button>Complete</Button>\n                       </Card.Actions>\n\n                   </Card>\n               )\n            }) : null}\n            \n            \n\n        </View>\n    )\n}\n\n\nexport default Order\n"]},"metadata":{},"sourceType":"module"}