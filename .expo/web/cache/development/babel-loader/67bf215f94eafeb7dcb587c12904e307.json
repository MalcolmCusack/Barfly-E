{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { Text, View } from \"../../../components/Themed\";\nimport { Card, Snackbar, Caption, Button, Subheading, Divider } from 'react-native-paper';\nimport { getUser } from \"../../graphql/queries\";\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { List, Colors } from 'react-native-paper';\nimport { updateOrder } from \"../../graphql/mutations\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\n\nvar Order = function Order(_ref) {\n  var order = _ref.order;\n\n  var _useState = useState(JSON.parse(order.items)),\n      _useState2 = _slicedToArray(_useState, 2),\n      orderItems = _useState2[0],\n      setOrderItems = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setUser = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      expanded = _useState8[0],\n      setExpanded = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      visable = _useState10[0],\n      setVisable = _useState10[1];\n\n  var onToggleSnackBar = function onToggleSnackBar() {\n    return setVisable(!visable);\n  };\n\n  var onDismissSnackBar = function onDismissSnackBar() {\n    return setVisable(false);\n  };\n\n  var updateCurrentOrder = function updateCurrentOrder() {\n    var update, updateResponse;\n    return _regeneratorRuntime.async(function updateCurrentOrder$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            update = API.graphql(graphqlOperation(updateOrder, {\n              input: payload\n            }));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(update);\n\n          case 4:\n            updateResponse = _context.sent;\n            console.log(updateResponse);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var startOrder = function startOrder() {\n    var payload, update, updateResponse;\n    return _regeneratorRuntime.async(function startOrder$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            payload = {\n              id: order.id,\n              orderStatus: \"in-progress\",\n              _version: order._version\n            };\n            _context2.prev = 1;\n            update = API.graphql(graphqlOperation(updateOrder, {\n              input: payload\n            }));\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(update);\n\n          case 5:\n            updateResponse = _context2.sent;\n            console.log(updateResponse);\n            _context2.next = 12;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.log(_context2.t0);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n\n  var completeOrder = function completeOrder() {\n    var payload, update, updateResponse;\n    return _regeneratorRuntime.async(function completeOrder$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            payload = {\n              id: order.id,\n              orderStatus: \"complete\",\n              _version: order._version\n            };\n            _context3.prev = 1;\n            update = API.graphql({\n              query: updateOrder,\n              variables: {\n                input: payload\n              }\n            });\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(update);\n\n          case 5:\n            updateResponse = _context3.sent;\n            console.log(updateResponse);\n            _context3.next = 12;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](1);\n            console.log(_context3.t0);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n\n  useEffect(function () {\n    var gatherUser = function gatherUser() {\n      var data, response;\n      return _regeneratorRuntime.async(function gatherUser$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              console.log(order);\n              data = API.graphql({\n                query: getUser,\n                variables: {\n                  id: order.userID\n                }\n              });\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(data);\n\n            case 5:\n              response = _context4.sent;\n              console.log(response);\n              setUser(response.data.getUser);\n              setIsLoading(false);\n              _context4.next = 14;\n              break;\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.log(_context4.t0);\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[0, 11]], Promise);\n    };\n\n    gatherUser();\n  }, []);\n\n  var handlePress = function handlePress() {\n    setExpanded(!expanded);\n  };\n\n  var renderOrder = function renderOrder() {\n    React.createElement(List.Section, null, React.createElement(List.Accordion, {\n      title: user.name + \"'s Order\",\n      expanded: expanded,\n      onPress: handlePress\n    }, orderItems.map(function (item) {\n      return React.createElement(List.Item, {\n        key: item.id,\n        title: item.name,\n        description: item.id,\n        left: function left(props) {\n          React.createElement(List.Icon, {\n            color: Colors.blue500,\n            icon: \"check\"\n          });\n        },\n        right: function right(props) {\n          React.createElement(List.Icon, {\n            icon: \"check\"\n          });\n        }\n      });\n    })));\n  };\n\n  var getTime = function getTime() {\n    var orderDate = new Date(order.createdAt);\n    var time = orderDate.getHours() + ':' + orderDate.getMinutes() + ':' + orderDate.getSeconds();\n    return time;\n  };\n\n  var styles = StyleSheet.create({\n    orderContainer: {\n      margin: 10\n    },\n    orderQueueContainer: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    title: {\n      fontSize: 20,\n      fontWeight: 'bold'\n    },\n    separator: {\n      marginVertical: 30,\n      height: 1,\n      width: '80%'\n    },\n    time: {\n      marginLeft: 15\n    },\n    divider: {\n      margin: 5\n    }\n  });\n  return React.createElement(View, {\n    style: styles.orderContainer\n  }, !isLoading ? React.createElement(Card, {\n    key: order.id\n  }, React.createElement(Card.Title, {\n    title: user.name.charAt(0).toUpperCase() + user.name.slice(1) + \"'s Order\"\n  }), React.createElement(Caption, {\n    style: styles.time\n  }, \" Placed: \", getTime()), React.createElement(Divider, {\n    style: styles.divider\n  }), React.createElement(Card.Content, null, orderItems.map(function (item) {\n    return React.createElement(Subheading, {\n      key: item.id\n    }, item.name);\n  })), React.createElement(Card.Actions, null, React.createElement(Button, {\n    onPress: startOrder\n  }, \"Start\"), React.createElement(Button, {\n    onPress: completeOrder\n  }, \"Complete\"))) : null);\n};\n\nexport default Order;","map":{"version":3,"sources":["/Users/malc/Desktop/barfly-e/src/components/orderqueue/Order.js"],"names":["React","useState","useEffect","Text","View","Card","Snackbar","Caption","Button","Subheading","Divider","getUser","API","graphqlOperation","List","Colors","updateOrder","Order","order","JSON","parse","items","orderItems","setOrderItems","user","setUser","isLoading","setIsLoading","expanded","setExpanded","visable","setVisable","onToggleSnackBar","onDismissSnackBar","updateCurrentOrder","update","graphql","input","payload","updateResponse","console","log","startOrder","id","orderStatus","_version","completeOrder","query","variables","gatherUser","data","userID","response","handlePress","renderOrder","name","map","item","props","blue500","getTime","orderDate","Date","createdAt","time","getHours","getMinutes","getSeconds","styles","StyleSheet","create","orderContainer","margin","orderQueueContainer","flex","alignItems","justifyContent","display","flexDirection","title","fontSize","fontWeight","separator","marginVertical","height","width","marginLeft","divider","charAt","toUpperCase","slice"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Text, View } from '../../../components/Themed';\nimport {Card, Snackbar, Caption, Button, Subheading, Divider} from 'react-native-paper';\nimport { getUser } from '../../graphql/queries';\nimport {API, graphqlOperation} from 'aws-amplify';\nimport { List, Colors } from 'react-native-paper';\nimport {updateOrder} from '../../graphql/mutations';\nimport { StyleSheet } from 'react-native';\n\nconst Order = ({ order }) => {\n\n    const [orderItems, setOrderItems] = useState(JSON.parse(order.items))\n    const [user, setUser] = useState()\n    const [isLoading, setIsLoading] = useState(true)\n    const [expanded, setExpanded] = useState(false)\n    const [visable, setVisable] = useState(false)\n\n    const onToggleSnackBar = () => setVisable(!visable);\n\n    const onDismissSnackBar = () => setVisable(false);\n\n    const updateCurrentOrder = async () => {\n\n\n        try {\n            const update = API.graphql(graphqlOperation(updateOrder, {\n                input: payload\n            }))\n            const updateResponse = await update\n            console.log(updateResponse)\n        } catch (err) {\n            console.log(err)\n        }\n        \n    }\n\n    const startOrder = async () => {\n        const payload = {\n            id: order.id,\n            orderStatus: \"in-progress\",\n            _version: order._version\n    \n        }\n\n        try {\n            const update = API.graphql(graphqlOperation(updateOrder, {\n                input: payload\n            }))\n            const updateResponse = await update\n            console.log(updateResponse)\n        } catch (err) {\n            console.log(err)\n        }\n        \n    }\n\n    const completeOrder = async () => {\n        const payload = {\n            id: order.id,\n            orderStatus: \"complete\",\n            _version: order._version\n        }\n\n        try {\n            const update = API.graphql({query: updateOrder, variables: {\n                input: payload\n            }});\n            const updateResponse = await update\n            console.log(updateResponse)\n        } catch (err) {\n            console.log(err)\n        }\n        \n    }\n\n    useEffect(() => {\n\n        const gatherUser = async () => {\n            try { \n                console.log(order)\n                const data = API.graphql( {query: getUser, \n                    variables: {\n                        id: order.userID\n                    }\n                })\n                const response =  await data\n                console.log(response)\n                setUser(response.data.getUser)\n                setIsLoading(false)\n    \n            } catch (err) {\n                console.log(err)\n            }\n        }\n\n        gatherUser()\n\n        \n    }, [])\n\n    const handlePress = () => {\n        setExpanded(!expanded)\n    }\n\n     const renderOrder = () => {\n        <List.Section>\n        <List.Accordion\n           title={user.name + \"'s Order\"}\n           expanded={expanded}\n           onPress={handlePress}\n       >\n           {orderItems.map(item => {\n              return <List.Item key={item.id} \n                title={item.name} \n                description={item.id} \n                left={props => {<List.Icon color={Colors.blue500} icon='check'/>}}\n                right={props => {<List.Icon icon='check'/>}}\n                >\n              </List.Item>\n             \n           })\n           }\n       </List.Accordion>\n    </List.Section>\n     }\n\n    const getTime = () => {\n        const orderDate = new Date(order.createdAt);\n        const time = orderDate.getHours() + ':' +  orderDate.getMinutes() + ':' + orderDate.getSeconds();\n        return time\n    }\n\n    const styles = StyleSheet.create({\n        orderContainer: {\n          margin: 10,\n        },\n        orderQueueContainer: {\n        flex: 1,\n          alignItems: 'center',\n          justifyContent: 'center',\n          display: 'flex',\n          flexDirection: 'row'\n        },\n        title: {\n          fontSize: 20,\n          fontWeight: 'bold',\n          \n        },\n        separator: {\n          marginVertical: 30,\n          height: 1,\n          width: '80%',\n        },\n\n        time: {\n            marginLeft: 15,\n        },\n\n        divider: {\n            margin: 5\n        }\n\n      });\n    \n    return (\n\n        <View style={styles.orderContainer}>\n            {!isLoading ? (\n                   <Card key={order.id}>\n                       <Card.Title title={user.name.charAt(0).toUpperCase() + user.name.slice(1) + \"'s Order\"} />\n                       <Caption style={styles.time} > Placed: {getTime()}</Caption>\n                       <Divider style={styles.divider} />\n                       \n                       <Card.Content>\n                           {orderItems.map(item => {\n                              return (\n                                <Subheading key={item.id}>\n                                    {item.name}\n                               </Subheading>\n                              ) \n                           })}\n                        \n                       </Card.Content>\n                       <Card.Actions>\n                           <Button onPress={startOrder}>Start</Button>\n                           <Button onPress={completeOrder}>Complete</Button>\n                       </Card.Actions>\n\n                   </Card>\n            \n            ) : null}\n            \n            \n\n        </View>\n    )\n}\n\n\nexport default Order\n"]},"metadata":{},"sourceType":"module"}