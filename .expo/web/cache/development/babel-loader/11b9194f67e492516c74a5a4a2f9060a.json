{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { onCreateOrder } from \"../graphql/subscriptions\";\nimport { listOrders } from \"../graphql/queries\";\nimport { Text } from \"../../components/Themed\";\n\nvar OrderQueue = function OrderQueue() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      orders = _useState2[0],\n      setOrders = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allOrders = _useState4[0],\n      setAllOrders = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  function subscribe() {\n    var ordersPromise, response, orderResponse;\n    return _regeneratorRuntime.async(function subscribe$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            ordersPromise = API.graphql(graphqlOperation(listOrders));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(ordersPromise);\n\n          case 4:\n            response = _context.sent;\n            setAllOrders([].concat(_toConsumableArray(allOrders), [response.data.listOrders.items]));\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n            try {\n              orderResponse = API.graphql(graphqlOperation(onCreateOrder)).subscribe({\n                next: function next(orderData) {\n                  var orderItems = JSON.parse(orderData.value.data.onCreateOrder.items);\n                  setOrders(function (orders) {\n                    return [].concat(_toConsumableArray(orders), [orderItems]);\n                  });\n                }\n              });\n              setIsLoading(false);\n            } catch (err) {\n              console.log(err);\n            }\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  useEffect(function () {\n    subscribe();\n  }, []);\n  console.log(orders);\n  return React.createElement(\"div\", {\n    style: {\n      height: '200px'\n    }\n  }, !isLoading ? orders.map(function (order) {\n    return order.map(function (element) {\n      {\n        console.log(element.name);\n      }\n      return React.createElement(\"div\", {\n        key: element.id\n      }, element.name);\n    });\n  }) : null);\n};\n\nexport default OrderQueue;","map":{"version":3,"sources":["/Users/malc/Desktop/barfly-e/src/components/OrderQueue.js"],"names":["React","useState","useEffect","API","graphqlOperation","onCreateOrder","listOrders","Text","OrderQueue","orders","setOrders","allOrders","setAllOrders","isLoading","setIsLoading","subscribe","ordersPromise","graphql","response","data","items","console","log","orderResponse","next","orderData","orderItems","JSON","parse","value","err","height","map","order","element","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,GAAR,EAAaC,gBAAb,QAAoC,aAApC;AACA,SAAQC,aAAR;AACA,SAASC,UAAT;AACA,SAASC,IAAT;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAErB,kBAA4BP,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOQ,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAkCT,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOU,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAkCX,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOY,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,WAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGUC,YAAAA,aAHV,GAG0Bb,GAAG,CAACc,OAAJ,CAAYb,gBAAgB,CAACE,UAAD,CAA5B,CAH1B;AAAA;AAAA,6CAI2BU,aAJ3B;;AAAA;AAIUE,YAAAA,QAJV;AAKIN,YAAAA,YAAY,8BAAKD,SAAL,IAAgBO,QAAQ,CAACC,IAAT,CAAcb,UAAd,CAAyBc,KAAzC,GAAZ;AALJ;AAAA;;AAAA;AAAA;AAAA;AAQIC,YAAAA,OAAO,CAACC,GAAR;;AARJ;AAWI,gBAAI;AACMC,cAAAA,aADN,GACsBpB,GAAG,CAACc,OAAJ,CAAYb,gBAAgB,CAACC,aAAD,CAA5B,EACpBU,SADoB,CACV;AACRS,gBAAAA,IAAI,EAAE,cAACC,SAAD,EAAe;AAEjB,sBAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,SAAS,CAACI,KAAV,CAAgBV,IAAhB,CAAqBd,aAArB,CAAmCe,KAA9C,CAAnB;AACAV,kBAAAA,SAAS,CAAC,UAAAD,MAAM;AAAA,wDAAQA,MAAR,IAAgBiB,UAAhB;AAAA,mBAAP,CAAT;AACH;AALO,eADU,CADtB;AAUAZ,cAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,aAZD,CAYE,OAAOgB,GAAP,EAAY;AACVT,cAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACH;;AAzBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BF5B,EAAAA,SAAS,CAAC,YAAM;AACZa,IAAAA,SAAS;AAEZ,GAHQ,EAGN,EAHM,CAAT;AAKEM,EAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AAEA,SACI;AAAK,IAAA,KAAK,EAAE;AAACsB,MAAAA,MAAM,EAAE;AAAT;AAAZ,KAEK,CAAClB,SAAD,GAAaJ,MAAM,CAACuB,GAAP,CAAW,UAAAC,KAAK,EAAI;AAC9B,WAAOA,KAAK,CAACD,GAAN,CAAU,UAAAE,OAAO,EAAI;AACxB;AAACb,QAAAA,OAAO,CAACC,GAAR,CAAYY,OAAO,CAACC,IAApB;AAA0B;AAC3B,aAAO;AAAK,QAAA,GAAG,EAAED,OAAO,CAACE;AAAlB,SAAuBF,OAAO,CAACC,IAA/B,CAAP;AACH,KAHM,CAAP;AAIH,GALa,CAAb,GAKI,IAPT,CADJ;AAWH,CAtDD;;AAwDA,eAAe3B,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {API, graphqlOperation} from 'aws-amplify';\nimport {onCreateOrder} from '../graphql/subscriptions';\nimport { listOrders } from '../graphql/queries';\nimport { Text } from '../../components/Themed';\n\nconst OrderQueue = () => {\n\n    const [orders, setOrders] = useState([])\n    const [allOrders, setAllOrders] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n\n    async function subscribe() {\n\n        try {\n        const ordersPromise = API.graphql(graphqlOperation(listOrders))\n        const response = await ordersPromise\n        setAllOrders([...allOrders, response.data.listOrders.items])\n        //console.log(response.data.listOrders.items)\n        } catch (err) {\n        console.log(err)\n        }\n\n        try {\n            const orderResponse = API.graphql(graphqlOperation(onCreateOrder)\n            ).subscribe({\n                next: (orderData) => {\n                    \n                    const orderItems = JSON.parse(orderData.value.data.onCreateOrder.items)\n                    setOrders(orders => [...orders, orderItems])\n                }\n            })\n  \n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n        }\n        \n}\n\n\n  useEffect(() => {\n      subscribe()\n      \n  }, [])\n\n    console.log(orders)\n  \n    return (\n        <div style={{height: '200px'}}>\n\n            {!isLoading ? orders.map(order => {\n                return order.map(element => {\n                    {console.log(element.name)}\n                    return <div key={element.id}>{element.name}</div>\n                })\n            }) : null}\n        </div>\n    )\n}\n\nexport default OrderQueue\n"]},"metadata":{},"sourceType":"module"}