{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { onCreateOrder } from \"../../graphql/subscriptions\";\nimport { listOrders } from \"../../graphql/queries\";\nimport { Text, View } from \"../../../components/Themed\";\nimport Order from \"./Order\";\n\nvar OrderQueue = function OrderQueue() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      orderItems = _useState2[0],\n      setOrderItems = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      orders = _useState4[0],\n      setOrders = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      allOrders = _useState6[0],\n      setAllOrders = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isLoading = _useState8[0],\n      setIsLoading = _useState8[1];\n\n  var orderTest = {\n    id: 'c3d52efa-84b1-44c3-8bf6-813fcc19f84d',\n    timestamp: null,\n    items: [JSON.parse(\"[{\\\"price\\\":16,\\\"name\\\":\\\"Bison Burger\\\",\\\"id\\\":\\\"05c28679-14c8-4a06-9261-c739f4f4f262\\\"},{\\\"price\\\":69.69,\\\"name\\\":\\\"Can of whoop ass\\\",\\\"id\\\":\\\"ca27fa30-54ac-4d0e-92a8-f5d216360289\\\"},{\\\"price\\\":23.5203409626507,\\\"name\\\":\\\"minim ex adipisici\\\",\\\"id\\\":\\\"5dde62ff-f2df-45fe-ae3c-0d3ff1d99bc1\\\"}]\")],\n    completed: false,\n    userID: \"7b91aced-aa0f-44f8-b436-9dbe35862c8e\",\n    barID: null,\n    employeeID: null,\n    _version: 1,\n    _deleted: null,\n    _lastChangedAt: 1638242406472,\n    createdAt: \"2021-11-30T03:20:06.447Z\",\n    updatedAt: \"2021-11-30T03:20:06.447Z\",\n    User: null\n  };\n  useEffect(function () {\n    var subscribe = function subscribe() {\n      var ordersPromise, response, orderResponse;\n      return _regeneratorRuntime.async(function subscribe$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              ordersPromise = API.graphql(graphqlOperation(listOrders));\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(ordersPromise);\n\n            case 4:\n              response = _context.sent;\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n              try {\n                orderResponse = API.graphql(graphqlOperation(onCreateOrder)).subscribe({\n                  next: function next(orderData) {\n                    console.log('full order data: ', orderData.value.data.onCreateOrder);\n                    var items = JSON.parse(orderData.value.data.onCreateOrder.items);\n                    setOrderItems(function (orderItems) {\n                      return [].concat(_toConsumableArray(orderItems), [items]);\n                    });\n                    setOrders(function (orders) {\n                      return [].concat(_toConsumableArray(orders), [orderData.value.data.onCreateOrder]);\n                    });\n                  }\n                });\n                setIsLoading(false);\n              } catch (err) {\n                console.log(err);\n              }\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    subscribe();\n  }, []);\n  console.log(orderItems);\n  console.log(orders);\n  orders.map(function (order) {\n    console.log('order: ', order);\n  });\n  return React.createElement(View, null, !isLoading ? orderTest.map(function (order) {\n    return React.createElement(Order, {\n      key: order.id,\n      order: order\n    });\n  }) : null);\n};\n\nexport default OrderQueue;","map":{"version":3,"sources":["/Users/malc/Desktop/barfly-e/src/components/orderqueue/OrderQueue.js"],"names":["React","useState","useEffect","API","graphqlOperation","onCreateOrder","listOrders","Text","View","Order","OrderQueue","orderItems","setOrderItems","orders","setOrders","allOrders","setAllOrders","isLoading","setIsLoading","orderTest","id","timestamp","items","JSON","parse","completed","userID","barID","employeeID","_version","_deleted","_lastChangedAt","createdAt","updatedAt","User","subscribe","ordersPromise","graphql","response","console","log","orderResponse","next","orderData","value","data","err","map","order"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {API, graphqlOperation} from 'aws-amplify';\nimport {onCreateOrder} from '../../graphql/subscriptions';\nimport { listOrders } from '../../graphql/queries';\nimport { Text, View } from '../../../components/Themed';\nimport Order from './Order';\n\nconst OrderQueue = () => {\n\n    const [orderItems, setOrderItems] = useState([])\n    const [orders, setOrders] = useState([])\n    const [allOrders, setAllOrders] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n\n    const orderTest = {\n    \n             id :  'c3d52efa-84b1-44c3-8bf6-813fcc19f84d' ,\n             timestamp : null,\n             items : [\n                JSON.parse(\"[{\\\"price\\\":16,\\\"name\\\":\\\"Bison Burger\\\",\\\"id\\\":\\\"05c28679-14c8-4a06-9261-c739f4f4f262\\\"},{\\\"price\\\":69.69,\\\"name\\\":\\\"Can of whoop ass\\\",\\\"id\\\":\\\"ca27fa30-54ac-4d0e-92a8-f5d216360289\\\"},{\\\"price\\\":23.5203409626507,\\\"name\\\":\\\"minim ex adipisici\\\",\\\"id\\\":\\\"5dde62ff-f2df-45fe-ae3c-0d3ff1d99bc1\\\"}]\")\n            ],\n             completed : false,\n             userID : \"7b91aced-aa0f-44f8-b436-9dbe35862c8e\",\n             barID : null,\n             employeeID : null,\n             _version : 1,\n             _deleted : null,\n             _lastChangedAt : 1638242406472,\n             createdAt : \"2021-11-30T03:20:06.447Z\",\n             updatedAt : \"2021-11-30T03:20:06.447Z\",\n             User : null\n    \n    }\n\n\n\n\n  useEffect(() => {\n    const subscribe = async () => {\n\n        try {\n        const ordersPromise = API.graphql(graphqlOperation(listOrders))\n        const response = await ordersPromise\n        //setAllOrders([...allOrders, response.data.listOrders.items])\n        //console.log(response.data.listOrders.items)\n        } catch (err) {\n        console.log(err)\n        }\n\n        try {\n            const orderResponse = API.graphql(graphqlOperation(onCreateOrder)\n            ).subscribe({\n                next: (orderData) => {\n                    console.log('full order data: ', orderData.value.data.onCreateOrder)\n                    const items = JSON.parse(orderData.value.data.onCreateOrder.items)\n                    setOrderItems(orderItems => [...orderItems, items])\n                    setOrders(orders => [...orders, orderData.value.data.onCreateOrder])\n                }\n            })\n  \n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n        }\n\n    }\n      \n    subscribe()\n      \n  }, [])\n\n    console.log(orderItems)\n    console.log(orders)\n\n    orders.map(order => {\n        console.log('order: ', order)\n    })\n  \n    return (\n        <View >\n\n            {!isLoading ? orderTest.map(order => {\n                    return <Order key={order.id} order={order} />\n            }) : null}\n        </View>\n    )\n}\n\nexport default OrderQueue\n"]},"metadata":{},"sourceType":"module"}