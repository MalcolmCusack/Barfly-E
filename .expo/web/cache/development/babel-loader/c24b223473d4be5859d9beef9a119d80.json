{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\n\nvar OrderQueue = function OrderQueue() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      orders = _useState2[0],\n      setOrders = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allOrders = _useState4[0],\n      setAllOrders = _useState4[1];\n\n  function subscribe() {\n    var ordersPromise, response;\n    return _regeneratorRuntime.async(function subscribe$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            ordersPromise = API.graphql(graphqlOperation(listOrders));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(ordersPromise);\n\n          case 4:\n            response = _context.sent;\n            setAllOrders([].concat(_toConsumableArray(allOrders), [response.data.listOrders.items]));\n            console.log(response.data.listOrders.items);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 12:\n            API.graphql(graphqlOperation(onCreateOrder)).subscribe({\n              next: function next(orderData) {\n                console.log(\"orderData: \", orderData.value.data);\n                setOrders([].concat(_toConsumableArray(orders), [orderData.value.data]));\n              }\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  }\n\n  useEffect(function () {\n    subscribe();\n  }, []);\n  console.log(allOrders[0]);\n  return React.createElement(\"div\", null, \"Hello\");\n};\n\nexport default OrderQueue;","map":{"version":3,"sources":["/Users/malc/Desktop/barfly-e/src/components/OrderQueue.js"],"names":["React","useState","useEffect","API","graphqlOperation","OrderQueue","orders","setOrders","allOrders","setAllOrders","subscribe","ordersPromise","graphql","listOrders","response","data","items","console","log","onCreateOrder","next","orderData","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,GAAR,EAAaC,gBAAb,QAAoC,aAApC;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAErB,kBAA4BJ,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOK,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAkCN,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOO,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,WAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGUC,YAAAA,aAHV,GAG0BR,GAAG,CAACS,OAAJ,CAAYR,gBAAgB,CAACS,UAAD,CAA5B,CAH1B;AAAA;AAAA,6CAI2BF,aAJ3B;;AAAA;AAIUG,YAAAA,QAJV;AAKIL,YAAAA,YAAY,8BAAKD,SAAL,IAAgBM,QAAQ,CAACC,IAAT,CAAcF,UAAd,CAAyBG,KAAzC,GAAZ;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACC,IAAT,CAAcF,UAAd,CAAyBG,KAArC;AANJ;AAAA;;AAAA;AAAA;AAAA;AAQIC,YAAAA,OAAO,CAACC,GAAR;;AARJ;AAWIf,YAAAA,GAAG,CAACS,OAAJ,CAAYR,gBAAgB,CAACe,aAAD,CAA5B,EACET,SADF,CACY;AACRU,cAAAA,IAAI,EAAE,cAACC,SAAD,EAAe;AACjBJ,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BG,SAAS,CAACC,KAAV,CAAgBP,IAA3C;AACAR,gBAAAA,SAAS,8BAAKD,MAAL,IAAae,SAAS,CAACC,KAAV,CAAgBP,IAA7B,GAAT;AACH;AAJO,aADZ;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBFb,EAAAA,SAAS,CAAC,YAAM;AACZQ,IAAAA,SAAS;AAEZ,GAHQ,EAGN,EAHM,CAAT;AAKAO,EAAAA,OAAO,CAACC,GAAR,CAAYV,SAAS,CAAC,CAAD,CAArB;AACE,SACI,yCADJ;AAKH,CArCD;;AAuCA,eAAeH,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {API, graphqlOperation} from 'aws-amplify'\n\nconst OrderQueue = () => {\n\n    const [orders, setOrders] = useState([])\n    const [allOrders, setAllOrders] = useState([])\n\n    async function subscribe() {\n\n        try {\n        const ordersPromise = API.graphql(graphqlOperation(listOrders))\n        const response = await ordersPromise\n        setAllOrders([...allOrders, response.data.listOrders.items])\n        console.log(response.data.listOrders.items)\n        } catch (err) {\n        console.log(err)\n        }\n\n        API.graphql(graphqlOperation(onCreateOrder)\n        ).subscribe({\n            next: (orderData) => {\n                console.log(\"orderData: \", orderData.value.data)\n                setOrders([...orders, orderData.value.data])\n            }\n        })\n}\n\n\n  useEffect(() => {\n      subscribe()\n      \n  }, [])\n\n  console.log(allOrders[0])\n    return (\n        <div>\n            Hello\n        </div>\n    )\n}\n\nexport default OrderQueue\n"]},"metadata":{},"sourceType":"module"}