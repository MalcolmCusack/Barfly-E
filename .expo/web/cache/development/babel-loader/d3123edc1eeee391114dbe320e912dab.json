{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { onCreateOrder } from \"../../graphql/subscriptions\";\nimport { listOrders } from \"../../graphql/queries\";\nimport { Text } from \"../../../components/Themed\";\nimport Order from \"./Order\";\n\nvar OrderQueue = function OrderQueue() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      orders = _useState2[0],\n      setOrders = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allOrders = _useState4[0],\n      setAllOrders = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  function subscribe() {\n    var ordersPromise, response, orderResponse;\n    return _regeneratorRuntime.async(function subscribe$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            ordersPromise = API.graphql(graphqlOperation(listOrders));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(ordersPromise);\n\n          case 4:\n            response = _context.sent;\n            setAllOrders([].concat(_toConsumableArray(allOrders), [response.data.listOrders.items]));\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n            try {\n              orderResponse = API.graphql(graphqlOperation(onCreateOrder)).subscribe({\n                next: function next(orderData) {\n                  var orderItems = JSON.parse(orderData.value.data.onCreateOrder.items);\n                  setOrders(function (orders) {\n                    return [].concat(_toConsumableArray(orders), [orderItems]);\n                  });\n                }\n              });\n              setIsLoading(false);\n            } catch (err) {\n              console.log(err);\n            }\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  useEffect(function () {\n    subscribe();\n  }, []);\n  console.log(orders);\n  return React.createElement(\"div\", null, !isLoading ? orders.map(function (order) {\n    return order.map(function (item) {\n      {\n        console.log(item.name);\n      }\n      return React.createElement(Order, {\n        key: item.id,\n        item: item\n      });\n    });\n  }) : null);\n};\n\nexport default OrderQueue;","map":{"version":3,"sources":["/Users/malc/Desktop/barfly-e/src/components/orderqueue/OrderQueue.js"],"names":["React","useState","useEffect","API","graphqlOperation","onCreateOrder","listOrders","Text","Order","OrderQueue","orders","setOrders","allOrders","setAllOrders","isLoading","setIsLoading","subscribe","ordersPromise","graphql","response","data","items","console","log","orderResponse","next","orderData","orderItems","JSON","parse","value","err","map","order","item","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,GAAR,EAAaC,gBAAb,QAAoC,aAApC;AACA,SAAQC,aAAR;AACA,SAASC,UAAT;AACA,SAASC,IAAT;AACA,OAAOC,KAAP;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAErB,kBAA4BR,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOS,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAkCV,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOW,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAkCZ,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOa,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,WAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGUC,YAAAA,aAHV,GAG0Bd,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACE,UAAD,CAA5B,CAH1B;AAAA;AAAA,6CAI2BW,aAJ3B;;AAAA;AAIUE,YAAAA,QAJV;AAKIN,YAAAA,YAAY,8BAAKD,SAAL,IAAgBO,QAAQ,CAACC,IAAT,CAAcd,UAAd,CAAyBe,KAAzC,GAAZ;AALJ;AAAA;;AAAA;AAAA;AAAA;AAQIC,YAAAA,OAAO,CAACC,GAAR;;AARJ;AAWI,gBAAI;AACMC,cAAAA,aADN,GACsBrB,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACC,aAAD,CAA5B,EACpBW,SADoB,CACV;AACRS,gBAAAA,IAAI,EAAE,cAACC,SAAD,EAAe;AAEjB,sBAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,SAAS,CAACI,KAAV,CAAgBV,IAAhB,CAAqBf,aAArB,CAAmCgB,KAA9C,CAAnB;AACAV,kBAAAA,SAAS,CAAC,UAAAD,MAAM;AAAA,wDAAQA,MAAR,IAAgBiB,UAAhB;AAAA,mBAAP,CAAT;AACH;AALO,eADU,CADtB;AAUAZ,cAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,aAZD,CAYE,OAAOgB,GAAP,EAAY;AACVT,cAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACH;;AAzBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BF7B,EAAAA,SAAS,CAAC,YAAM;AACZc,IAAAA,SAAS;AAEZ,GAHQ,EAGN,EAHM,CAAT;AAKEM,EAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AAEA,SACI,iCAEK,CAACI,SAAD,GAAaJ,MAAM,CAACsB,GAAP,CAAW,UAAAC,KAAK,EAAI;AAC9B,WAAOA,KAAK,CAACD,GAAN,CAAU,UAAAE,IAAI,EAAI;AACrB;AAACZ,QAAAA,OAAO,CAACC,GAAR,CAAYW,IAAI,CAACC,IAAjB;AAAuB;AACxB,aAAO,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAED,IAAI,CAACE,EAAjB;AAAqB,QAAA,IAAI,EAAEF;AAA3B,QAAP;AACH,KAHM,CAAP;AAIH,GALa,CAAb,GAKI,IAPT,CADJ;AAWH,CAtDD;;AAwDA,eAAezB,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {API, graphqlOperation} from 'aws-amplify';\nimport {onCreateOrder} from '../../graphql/subscriptions';\nimport { listOrders } from '../../graphql/queries';\nimport { Text } from '../../../components/Themed';\nimport Order from './Order';\n\nconst OrderQueue = () => {\n\n    const [orders, setOrders] = useState([])\n    const [allOrders, setAllOrders] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n\n    async function subscribe() {\n\n        try {\n        const ordersPromise = API.graphql(graphqlOperation(listOrders))\n        const response = await ordersPromise\n        setAllOrders([...allOrders, response.data.listOrders.items])\n        //console.log(response.data.listOrders.items)\n        } catch (err) {\n        console.log(err)\n        }\n\n        try {\n            const orderResponse = API.graphql(graphqlOperation(onCreateOrder)\n            ).subscribe({\n                next: (orderData) => {\n                    \n                    const orderItems = JSON.parse(orderData.value.data.onCreateOrder.items)\n                    setOrders(orders => [...orders, orderItems])\n                }\n            })\n  \n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n        }\n        \n}\n\n\n  useEffect(() => {\n      subscribe()\n      \n  }, [])\n\n    console.log(orders)\n  \n    return (\n        <div >\n\n            {!isLoading ? orders.map(order => {\n                return order.map(item => {\n                    {console.log(item.name)}\n                    return <Order key={item.id} item={item} />\n                })\n            }) : null}\n        </div>\n    )\n}\n\nexport default OrderQueue\n"]},"metadata":{},"sourceType":"module"}